<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zsh on ErebusBat</title>
    <link>http://www.erebusbat.com/tags/zsh/</link>
    <description>Recent content in Zsh on ErebusBat</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 04 Sep 2012 16:17:49 -0600</lastBuildDate>
    <atom:link href="http://www.erebusbat.com/tags/zsh/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>ZSH Field Notes</title>
      <link>http://www.erebusbat.com/fieldnotes/zsh/</link>
      <pubDate>Tue, 04 Sep 2012 16:17:49 -0600</pubDate>
      
      <guid>http://www.erebusbat.com/fieldnotes/zsh/</guid>
      <description>

&lt;h2 id=&#34;links:aa364d83240e3026be0190c02971a96d&#34;&gt;Links&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cs.elte.hu/zsh-manual/zsh_12.html&#34;&gt;ZSH Conditional Expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://zanshin.net/2013/09/03/how-to-use-homebrew-zsh-instead-of-max-os-x-default/&#34;&gt;http://zanshin.net/2013/09/03/how-to-use-homebrew-zsh-instead-of-max-os-x-default/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://linux-training.be/files/books/html/fun/index.html&#34;&gt; Some basic but good generic linux docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;path-expansion:aa364d83240e3026be0190c02971a96d&#34;&gt;Path Expansion&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/usr/bin/zsh
# test script
theVar=&#39;/bin/path/file.txt&#39;
echo ${theVar:e}    # txt
echo ${theVar:t}    # file.txt
echo ${theVar:r}    # /bin/path/file
echo ${theVar:h}    # /bin/path
echo ${theVar:h:h}  # /bin
echo ${theVar:t:r}  # file
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Flag&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;h&lt;/td&gt;
&lt;td&gt;Remove a trailing pathname component, leaving the head.  This works like `dirname&amp;rsquo;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;r&lt;/td&gt;
&lt;td&gt;Remove a filename extension of the form `.XXX&amp;rsquo;, leaving the root name.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;e&lt;/td&gt;
&lt;td&gt;Remove all but the extension.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;t&lt;/td&gt;
&lt;td&gt;Remove all leading pathname components, leaving the tail.  This works like `basename&amp;rsquo;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;loops:aa364d83240e3026be0190c02971a96d&#34;&gt;Loops&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# WHILE - Simple watch
while (sleep 60) do; clear; ./command; done
# FOR - Every file
for f in *.m4v; do mvmedia $f; done
for f in *.{html,sass}; do echo $f; done
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Dump MySQL table &#39;contents&#39; into development, every M5 /w messages
while (true) do;
  echo &amp;quot;Dumping $(date)...&amp;quot;;
  ssh prodsrv &amp;quot;mysqldump database_production contents&amp;quot; | mysql database_development;
  echo &amp;quot;    done&amp;quot;;
  sleep 300;
done
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Very simple benchmark
for i in {1..5}; do time echo &#39;exit&#39; | rails c production; done
for i in {1..5}; do time rake -T &amp;gt; /dev/null; done
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Process a subset of zero padded files, like D02S00.  03-13 in this example:
for s in `seq -f &amp;quot;%02g&amp;quot; 3 13`; do \
  task1.rb &amp;quot;IMG.D02S${s}.mkv&amp;quot; &amp;amp;&amp;amp; \
  task2 &amp;quot;IMG.D02S${s}.m4v&amp;quot;; done
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;regular-expressions-regex:aa364d83240e3026be0190c02971a96d&#34;&gt;Regular Expressions Regex&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ITEMS=(
  Desktop
  Pictures
  Backups
)
# Allow specifying items to select as $1, separated by a space (/ /),
if [[ ! -z $1 ]]; then
  # This will become an array
  SPECIFIED_ITEMS=(&amp;quot;${(s/ /)1}&amp;quot;)
  for i in $SPECIFIED_ITEMS; do
    # This syntax will remove the extension (r), then check the ITEMS
    # collection to get the index ($i), -1 if not found
    if [[ ${${ITEMS[(r)$i]}:--1} == &amp;quot;-1&amp;quot; ]]; then
      echo &amp;quot;*** ERROR: $i is not a valid item! Valid items are: $ITEMS&amp;quot;
      exit 1
    else
      # OK
    fi
  done
  ITEMS=$SPECIFIED_ITEMS
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;arrays:aa364d83240e3026be0190c02971a96d&#34;&gt;Arrays&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Allow specifying items to override as $1, separated by a space (/ /),
# check to make sure that said items are valid (appear in the ITEMS list).
URLS=(
  Desktop
  Pictures
  Backups
)

# Loop
for f in $URLS; do
  wget $f
done
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;hotkeys:aa364d83240e3026be0190c02971a96d&#34;&gt;Hotkeys&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://coderwall.com/p/a8uxma&#34;&gt;https://coderwall.com/p/a8uxma&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.geekmind.net/2011/01/shortcuts-to-improve-your-bash-zsh.html&#34;&gt;http://www.geekmind.net/2011/01/shortcuts-to-improve-your-bash-zsh.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;history:aa364d83240e3026be0190c02971a96d&#34;&gt;History&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/9502274/last-command-in-same-terminal&#34;&gt;http://stackoverflow.com/questions/9502274/last-command-in-same-terminal&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Don&#39;t share history between sessions
setopt no_share_history

# Share history between sessions
setopt share_history
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;passing-arguments-to-app:aa364d83240e3026be0190c02971a96d&#34;&gt;Passing Arguments to App&lt;/h3&gt;

&lt;p&gt;Below is a wrapper script that sources [[rbenv]] and passes ALL arguments (correctly) to the ruby script.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/zsh
export HOME=/Users/aburns
export PATH=$HOME/.rbenv/bin:$PATH
eval &amp;quot;$(rbenv init -)&amp;quot;
cd $HOME/bin/1.9.3
# echo -E ${(q)@}
ruby ./myIL.rb ${(Q)@}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>